@page "/"
@using BlazorVideoApp.Client.Interop;
@using BlazorVideoApp.Shared;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.JSInterop;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;

<div class="row h-100 pt-5">
    <div class="col-3">
        <div class="jumbotron p-4">
            <Cameras CameraChanged="OnCameraChanged" />
            <h5><i class="fas fa-video"></i> Rooms</h5>
            <div class="list-group">
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="input-group">
                        <input type="text" class="form-control form-control-lg"
                               placeholder="Room name" aria-label="Room Name" disabled="@(_activeCamera is null)"
                               @bind="_roomName" @onkeydown="@(async args => await TryAddRoom(args))" />
                        <div class="input-group-append">
                            <button class="btn btn-lg twilio-btn-red"
                                    disabled="@(_activeCamera is null || _roomName is null)"
                                    @onclick="@(async args => await TryAddRoom(args))">
                                <i class="far fa-plus-square" aria-label="Create room"></i> Create
                            </button>
                        </div>
                    </div>
                </div>
                @if (!(_rooms?.Any() ?? false))
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <p class="lead mb-0">
                            Add a room to begin. Other online participants can join or create rooms.
                        </p>
                    </div>
                }
                else
                {
                    @foreach (var room in _rooms!)
                    {
                        <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center
                           @(room.Name == _activeRoom ? "active" : null)"
                           @onclick="@(async _ => await TryJoinRoom(room.Name))">
                            @room.Name
                            <span class="badge badge-primary badge-pill">
                                @($"{room.ParticipantCount} / {room.MaxParticipants}")
                            </span>
                        </a>
                    }
                }

                @if (_activeRoom != null)
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <button class="btn btn-lg twilio-btn-red w-100" @onclick="@(async _ => await OnLeaveRoom())">Leave Room?</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-9">
        <div id="participants" class="participants-grid">
            <div class="embed-responsive embed-responsive-16by9">
                <div id="camera" class="embed-responsive-item"></div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    protected IJSRuntime? JavaScript { get; set; }
    [Inject]
    protected NavigationManager NavigationManager { get; set; } = null!;
    [Inject]
    protected HttpClient Http { get; set; } = null!;

    List<RoomDetails> _rooms = new List<RoomDetails>();

    string? _roomName;
    string? _activeCamera;
    string? _activeRoom;
    HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _rooms = await Http.GetFromJsonAsync<List<RoomDetails>>("api/twilio/rooms");

        _hubConnection = new HubConnectionBuilder()
            .AddMessagePackProtocol()
            .WithUrl(NavigationManager.ToAbsoluteUri(HubEndpoint.NotificationHub))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>(HubEndpoint.RoomsUpdated, OnRoomAdded);

        await _hubConnection.StartAsync();
    }

    async ValueTask OnLeaveRoom()
    {
        await JavaScript.LeaveRoomAsync();
        await _hubConnection.InvokeAsync(HubEndpoint.RoomsUpdated, _activeRoom = null);
        if (!string.IsNullOrWhiteSpace(_activeCamera))
        {
            await JavaScript.StartVideoAsync(_activeCamera, "#camera");
        }
    }

    async Task OnCameraChanged(string activeCamera) =>
        await InvokeAsync(() => _activeCamera = activeCamera);

    async Task OnRoomAdded(string roomName) =>
        await InvokeAsync(async () =>
        {
            _rooms = await Http.GetFromJsonAsync<List<RoomDetails>>("api/twilio/rooms");
            StateHasChanged();
        });

    protected async ValueTask TryAddRoom(object args)
    {
        if (_roomName is null || _roomName is { Length: 0 })
        {
            return;
        }

        var takeAction = args switch
        {
            KeyboardEventArgs keyboard when keyboard.Key == "Enter" => true,
            MouseEventArgs _ => true,
            _ => false
        };

        if (takeAction)
        {
            var addedOrJoined = await TryJoinRoom(_roomName);
            if (addedOrJoined)
            {
                _roomName = null;
            }
        }
    }

    protected async ValueTask<bool> TryJoinRoom(string? roomName)
    {
        if (roomName is null || roomName is { Length: 0 })
        {
            return false;
        }

        var jwt = await Http.GetFromJsonAsync<TwilioJwt>("api/twilio/token");
        if (jwt?.Token is null)
        {
            return false;
        }

        var joined = await JavaScript.CreateOrJoinRoomAsync(roomName, jwt.Token);
        if (joined)
        {
            _activeRoom = roomName;
            await _hubConnection.InvokeAsync(HubEndpoint.RoomsUpdated, _activeRoom);
        }

        return joined;
    }

}